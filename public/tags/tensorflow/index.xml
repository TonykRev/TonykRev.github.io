<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TensorFlow on TonyK's Tech Blog</title><link>https://tonykrev.github.io/tags/tensorflow/</link><description>Recent content in TensorFlow on TonyK's Tech Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 10 Mar 2024 10:00:00 +0000</lastBuildDate><atom:link href="https://tonykrev.github.io/tags/tensorflow/index.xml" rel="self" type="application/rss+xml"/><item><title>Deep Learning for Image Classification</title><link>https://tonykrev.github.io/posts/deep-learning-for-image-classification/</link><pubDate>Sun, 10 Mar 2024 10:00:00 +0000</pubDate><guid>https://tonykrev.github.io/posts/deep-learning-for-image-classification/</guid><description>&lt;h2 id="getting-started-with-deep-learning"&gt;Getting Started with Deep Learning&lt;/h2&gt;
&lt;p&gt;Deep learning has revolutionized how we approach computer vision problems. In this tutorial, we&amp;rsquo;ll build an image classifier from scratch.&lt;/p&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8+&lt;/li&gt;
&lt;li&gt;TensorFlow 2.0&lt;/li&gt;
&lt;li&gt;NumPy and Pandas&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="building-the-model"&gt;Building the Model&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; tensorflow &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; tf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; tensorflow &lt;span style="color:#f92672"&gt;import&lt;/span&gt; keras
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;model &lt;span style="color:#f92672"&gt;=&lt;/span&gt; keras&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Sequential([
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; keras&lt;span style="color:#f92672"&gt;.&lt;/span&gt;layers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Conv2D(&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;, (&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;), activation&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; keras&lt;span style="color:#f92672"&gt;.&lt;/span&gt;layers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MaxPooling2D(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; keras&lt;span style="color:#f92672"&gt;.&lt;/span&gt;layers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Flatten(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; keras&lt;span style="color:#f92672"&gt;.&lt;/span&gt;layers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Dense(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, activation&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;softmax&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s dive into the implementation details&amp;hellip;&lt;/p&gt;</description></item></channel></rss>